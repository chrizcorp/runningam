// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/Interval.dart';
import 'models/training_interval.dart';
import 'models/training_set.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4221144456538617952),
      name: 'IntervalUnitDTO',
      lastPropertyId: const IdUid(4, 2500166641564169086),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7688956520409251789),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 708489844979524585),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4464565192849822204),
            name: 'minutes',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2500166641564169086),
            name: 'seconds',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 529688720015730729),
      name: 'TrainingIntervalDTO',
      lastPropertyId: const IdUid(4, 6035336818404648886),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4942536937933950437),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7481141396099395061),
            name: 'trainingId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 4852505231575179654),
            relationTarget: 'TrainingSet'),
        ModelProperty(
            id: const IdUid(3, 1527699537739119790),
            name: 'intervalId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 8336071821485665981),
            relationTarget: 'IntervalUnitDTO'),
        ModelProperty(
            id: const IdUid(4, 6035336818404648886),
            name: 'position',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8949637745982211695),
      name: 'TrainingSet',
      lastPropertyId: const IdUid(2, 3289040062561589475),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3563151904060716220),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3289040062561589475),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6200928973083312985))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'intervals', srcEntity: 'TrainingIntervalDTO', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8949637745982211695),
      lastIndexId: const IdUid(3, 6200928973083312985),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    IntervalUnitDTO: EntityDefinition<IntervalUnitDTO>(
        model: _entities[0],
        toOneRelations: (IntervalUnitDTO object) => [],
        toManyRelations: (IntervalUnitDTO object) => {},
        getId: (IntervalUnitDTO object) => object.id,
        setId: (IntervalUnitDTO object, int id) {
          object.id = id;
        },
        objectToFB: (IntervalUnitDTO object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.minutes);
          fbb.addInt64(3, object.seconds);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = IntervalUnitDTO(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              minutes:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              seconds:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));

          return object;
        }),
    TrainingIntervalDTO: EntityDefinition<TrainingIntervalDTO>(
        model: _entities[1],
        toOneRelations: (TrainingIntervalDTO object) =>
            [object.training, object.interval],
        toManyRelations: (TrainingIntervalDTO object) => {},
        getId: (TrainingIntervalDTO object) => object.id,
        setId: (TrainingIntervalDTO object, int id) {
          object.id = id;
        },
        objectToFB: (TrainingIntervalDTO object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.training.targetId);
          fbb.addInt64(2, object.interval.targetId);
          fbb.addInt64(3, object.position);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrainingIntervalDTO(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              position:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          object.training.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.training.attach(store);
          object.interval.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.interval.attach(store);
          return object;
        }),
    TrainingSet: EntityDefinition<TrainingSet>(
        model: _entities[2],
        toOneRelations: (TrainingSet object) => [],
        toManyRelations: (TrainingSet object) => {
              RelInfo<TrainingIntervalDTO>.toOneBacklink(2, object.id,
                      (TrainingIntervalDTO srcObject) => srcObject.training):
                  object.intervals
            },
        getId: (TrainingSet object) => object.id,
        setId: (TrainingSet object, int id) {
          object.id = id;
        },
        objectToFB: (TrainingSet object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrainingSet(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo(
              object.intervals,
              store,
              RelInfo<TrainingIntervalDTO>.toOneBacklink(2, object.id,
                  (TrainingIntervalDTO srcObject) => srcObject.training),
              store.box<TrainingSet>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [IntervalUnitDTO] entity fields to define ObjectBox queries.
class IntervalUnitDTO_ {
  /// see [IntervalUnitDTO.id]
  static final id =
      QueryIntegerProperty<IntervalUnitDTO>(_entities[0].properties[0]);

  /// see [IntervalUnitDTO.name]
  static final name =
      QueryStringProperty<IntervalUnitDTO>(_entities[0].properties[1]);

  /// see [IntervalUnitDTO.minutes]
  static final minutes =
      QueryIntegerProperty<IntervalUnitDTO>(_entities[0].properties[2]);

  /// see [IntervalUnitDTO.seconds]
  static final seconds =
      QueryIntegerProperty<IntervalUnitDTO>(_entities[0].properties[3]);
}

/// [TrainingIntervalDTO] entity fields to define ObjectBox queries.
class TrainingIntervalDTO_ {
  /// see [TrainingIntervalDTO.id]
  static final id =
      QueryIntegerProperty<TrainingIntervalDTO>(_entities[1].properties[0]);

  /// see [TrainingIntervalDTO.training]
  static final training = QueryRelationToOne<TrainingIntervalDTO, TrainingSet>(
      _entities[1].properties[1]);

  /// see [TrainingIntervalDTO.interval]
  static final interval =
      QueryRelationToOne<TrainingIntervalDTO, IntervalUnitDTO>(
          _entities[1].properties[2]);

  /// see [TrainingIntervalDTO.position]
  static final position =
      QueryIntegerProperty<TrainingIntervalDTO>(_entities[1].properties[3]);
}

/// [TrainingSet] entity fields to define ObjectBox queries.
class TrainingSet_ {
  /// see [TrainingSet.id]
  static final id =
      QueryIntegerProperty<TrainingSet>(_entities[2].properties[0]);

  /// see [TrainingSet.name]
  static final name =
      QueryStringProperty<TrainingSet>(_entities[2].properties[1]);
}
